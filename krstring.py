from __future__ import print_function
from __future__ import unicode_literals


def produce_edits(s1, s2):
    import Levenshtein

    ocs = Levenshtein.opcodes(s1, s2)

    e = list()

    for oc in ocs:
        k = ''
        if oc[0] != b'equal':
            k = s2[oc[3]:oc[4]]

        l = 1

        if len(set(str(k))) == 1:
            l = len(k)
            k = k[0]

        e.append((oc, str(k), l))

    return e


def apply_edits(e, s):
    import Levenshtein

    # print(s[0:150])

    ocs = [x[0] for x in e]

    s2 = ''

    for edit in e:
        if edit[0][0] == b'equal':
            start = edit[0][3]
            stop = edit[0][4]
            s2 = s2 + (stop-start) * '.'
        else:
            s2 = s2 + edit[1] * edit[2]

    # print(s2[0:150])

    edited = Levenshtein.apply_edit(ocs, unicode(s), unicode(s2))

    # print(edited[0:150])

    return edited


def edits_to_string(e):
    edits_string = ''
    for edit in e:
        ocs = edit[0]
        s = str(edit[1])
        c = str(edit[2])
        edits_string = edits_string + ocs[0] + ',' + str(ocs[1]) + ',' + str(ocs[2]) + ',' + str(ocs[3]) + ',' + str(ocs[4]) + ',' + s + ',' + c + '|'
    edits_string = edits_string.strip('|')
    # print(edits_string)
    return edits_string


def string_to_edits(edits_string):
    edits = list()
    edits_temp = edits_string.split('|')
    for et in edits_temp:
        et_split = et.split(',')
        # print(et_split)
        e_ocs = (str(et_split[0]), int(et_split[1]), int(et_split[2]), int(et_split[3]), int(et_split[4]))
        s = str(et_split[5])
        c = int(et_split[6])
        edits.append((e_ocs, s, c))
    # print(edits)
    return edits


if __name__ == '__main__':

    # Tests

    import os

    PS = os.path.sep

    pass

    # s1 = 'ATGGAACATACATATCAATATGCATGGGTAATCCCTCTTCTCCCACTTCCAGTTATTATGTCAATGGGATTTGGCCTTATTCTTATTCCGACAGCAACAAAAAATCTTCGTCGCATATGGGCTTTTCCTAGTGTTTTACTCTTAAGTATAGCTATGGTATTCTCAGTTCAACTGTCTATTCAACAAATAAATGGAAGTTCGATCTATCAATATCTATGGTCTTGGACCGTCAATAATGATTTTTCTTTAGAATTTGGATACTTGATTGACCCACTTACTTCTATTATGTTAATACTAATTACTACTGTAGGAATCCTGGTTCTTATTTATAGTGATGGTTATATGTCTCACGATGAAGGATATTTGAGATTTTTTGTTTATATAAGTTTTTTCAATACTTCCATGTTGGGATTGGTTACTAGCTCCAATTTGATACAAATTTATTTTTTTTGGGAACTCGTGGGAATGTGTTCTTATTTATTGATAGGCTTTTGGTTTACACGACCAATCGCAGCGAGTGCTTGTCAAAAAGCTTTTGTAACTAATCGTGTAGGGGATTTTGGTCTATTATTAGGAATTTTAGGTTTTTTTTGGATAACAGGTAGTTTAGAGTTTAGGGATTTGTTCAAAATAGCTAATAACTGGATTCCTAATAATGGAGTTAACTCTTTACTTACTACTTTGTGTGCTTTTTTATTATTCCTTGGTGCAGTTGCGAAATCCGCACAATTCCCTCTTCACGTATGGTTACCCGATGCTATGGAAGGACCCACTCCTATTTCAGCTCTTATACAAGCAGCAACTATGGTTGCTGCGGGAATTTTTCTTCTAGCTCGACTTCTTCCTCTTTTCATATCTTTACCTTTGATAATGAGTTTTATTTCTTTAGTAGGTACAATAACACTATTCTTAGGAGCTACTTTAGCTCTTGCTCAGAGAGATATTAAAAGAAGCTTAGCCTATTCTACAATGTCTCAATTGGGTTATATGATGTTAGCTCTAGGTATAGGTTCTTATCAAGCTGCTTTATTCCATTTGATCACTCATGCTTATTCAAAAGCTTTATTGTTCTTGGGATCCGGATCCGTTATTCATTCAATGGAACCTCTTGTTGGATATTCACCAGATAAAAGTCAAAATATGGTTCTTATGGGCGGTTTAAGAAAATACATTCCAATCACAAGAACTACTTTTTTATGGGGTACACTTTCTCTTTGTGGTATTCCACCTCTTGCTTGCTTCTGGTCCAAAGATGAAATCCTTAGTAATAGTTGGTTGTATTCGCCCTTTTTTGGAATAATAGCCTCCTTTACTGCAGGATTAACTGCCTTTTATATGTTTCGGATATATTTACTTACATTTGATGGGTATTTGCGTGTTCATTTTCAAAATTACAGTAGCACTAAAGAGAGTTCCTTGTATTCAATATCCTTATGGGGAAAAAGGATACCCAAAGGAGTGAATAGGGATTTCGTTTTATCAACAACGAAGAGTGGAGTTTCTTTTTTTTCACAAAATATACCAAAAATTCAAGGTAATACAAGAAATAGGATAGGATCCTTTACTACGTCTTTTGGGGCTAAAAACACTTTTGCCTATCCGCATGAAACGGGAAATACTATGTTATTTCCTCTTCTTATATTACTACTTTTCACTTTGTTCATTGGATTCATAGGAATCTCTTTTGATAATGGAGGAATTGGTAATGGAATAGCAGAGTTAACCATATTATCAAAGTGGTTAACTCCCTCAATAAACTTTACTCAGGAAAGTTCTAATTCTTTTGTAAATTCATATGAATTTATTACTAATGCAATTTCTTCTGTAACTCTAGCTATCTTTGGTTTATTCATAGCATATATCTTCTATGGATCCGCTTATTCTTTTTTTCAGAATTTGGATTTAATAAACTCTTTTTACAAAGGAAATCCTAAAAAAGAATTTTTAGATCAAGTAAAAAAAAATATATACAGTTGGTCATATAATCGTGGTTATATAGATATTTTCTATACTAGGGTCTTTACCCTCGGTATAAGAGGGTTAACCGAACTAACGGAGTTTTTTGATAAGGGTGTTATTTATGGAATTACCAATGGAGTGGGTCTTCCTAGTTTTTGTATAGGAGAAGAAATTAAATATGTAGGGGGAGGTCGAATCTCGTCTTATTTATTCTTTTTTTTATGTTATGTATCTTTGTTTTTATTCTTTTTTCTTTCTTAA'.lower()
    # s2 = 'ATGGAACATACATATCAATATGCCTGGGTAATTCCTCTTCTCCCACTTCCAGTTATTATGTCAATGGGATTTGGACTTTTTCTTATTCCTACAGCAACAAAAAATCTTCGTCGGATATGGGCTTTTCCTAGTATTTTACTCTTAAGTATAGCTATGGTATTCTCACTTCACCTGTCTATTCAACAAATAAATGGAAGTTCTATCTATCAATATCTATGGTCTTGGACCATCAATAATGATTTTTCCTTAGAATTTGGATACTTGGTCGACCCCCTTACGTCTATTATGTTAATACTAATTACTACTGTAGGAATCTTAGTTCTTATTTATAGTGACGATTATATGTCTCACGATGAAGGATATTTGAGATTTTTTGTTTATATAAGTTTTTTTAATACTTCCATGTTAGGATTGGTTACTAGTTCCAATTTGATACAAATTTATTTTTTTTGGGAACTTGTGGGAATGTGTTCCTATTTATTGATAGGTTTTTGGTTTACGCGGCCAATTGCAGCGAGTGCTTGTCAAAAAGCTTTTGTAACTAATCGTGTAGGGGATTTTGGTCTGTTATTAGGAATTTTAGGTTTTTTTTGGATAACGGGTAGTTTGGAGTTTCGGGATTTGTTCAAAATAGCTAATAACTGGATTCCTAATAATGGGATTAATTCCTTACTTACTACTTTGTGTGCTTTTTTATTATTCCTTGGTGCAGTTGCAAAATCTGCACAATTTCCTCTTCACGTATGGTTACCTGATGCTATGGAAGGACCCACTCCTATTTCGGCTCTTATACACGCAGCAACTATGGTTGCTGCGGGGATTTTTCTTCTAGCTAGACTTCTTCCTCTTTTCATATCCCTACCCTGGATAATGAGTTTCATTTCTTTAATAGGTACAATAACACTCTTCTTAGGAGCCACTTTAGCTCTTGCTCAGAGAGATATTAAAAGAAGCTTAGCCTATTCTACAATGTCTCAATTGGGTTATATGATGTTAGCTCTAGGTATAGGTTCTTATCAAGCTGCTTTATTCCATTTGATCACTCATGCTTATTCGAAAGCTTTATTGTTCTTAGGATCCGGATCCGTTATTCATTCAATGGAACCTCTTGTTGGATATTCACCAGATAAAAGTCAGAATATGGTTCTTATGGGTGGTTTAAGAAAATACGTTCCAATTACAAGAACTACTTTTTTATGTGGTACACTTTCTCTTTGTGGTATTCCACCTCTTGCTTGCTTCTGGTCCAAAGATGAAATCCTTAGTAATAGTTGGTTGTATTCACCCTTTTTTGGAATAATAGCTTCTTTTACTGCAGGATTAACTGCATTTTATATGTTTCGGATATATTTACTTACTTTTGATGGGTATTTGCGTGTTCATTTTCAAAATTACAGTAGTACTAAAGAAGGTTCGTTGTATTCAATATCCTTATGGGGAAAAAGTATATCCAAAGGAGTCAATAGGGATTTTGTTTTATCAACAATGAAGAGTGGAGTTTCTTTTTTTTCACAAAATATACCAAAAATTCCTGCTAATACAAGAAATAAGATAGGATCCTTTAGTACTCCCTTTGGGGCTAAAAATACTTTTGTCTATCCTCATGAAACGGGAAATACTATGCTATTTCCTCTTCTTATATTACTACTTTTTACTTTGTTCATTGGATCCATAGGAATCCATTTTGATAATGGAGTAAAAGATAATAGAATATTGGAGTTAACCATATTATCAAAGTGGCTAACTCCTTCAATAAACTTGTTCCAGGAAAATTCTAATTCTTCCATAAATTCATATGAATTTCTCACTAATGCAATTTCTTCTGTAAGTTTAGCAATTTTTGGTCTATTCATAGCATATATCTTTTATGGATCTGCTTATTCTTTTTTTCAGAATTTGAATTTTCAAAATTCCCTTGTAAAAAAGAATCCAAAAAAGAGCTTTTTGGATGAAGTAAAAAAAAAGATATACAGCTGGTCATATAATCGTGGTTATATAGATTTTTTCTATACTAGGGTTTTTATCCTAGGTATAAGAAAGTTAGCCGAACTAACGCATTTTTTTGATAAAGGTGTCATTGATGGAATTACCAATGGAGTAGGTCTTGCTGGTTTTTGTATAGGAGAAGAAATCAAATATGTAGGGGGAGGGCGAATATCGTCTTATCTATTCTTTTTTTTATGTTATGTATCCTTGTTCTTATTCTTTATTC---CATGA'.lower()

    # e = produce_edits(s1, s2)
    # edited = apply_edits(e, s1)
    # edits_string = edits_to_string(e)
    # e_decoded = string_to_edits(edits_string)
    # edited_new = apply_edits(e_decoded, s1)

    # print(s1[0:150])
    # print(s2[0:150])
    # print(edited_new[0:150])
